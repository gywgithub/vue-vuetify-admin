{"version":3,"sources":["webpack:///./src/components/Charts/VegaCharts.vue?ee29","webpack:///./src/components/Charts/VegaCharts.vue?c99d","webpack:///./src/components/Charts/VegaCharts.vue?d669","webpack:///./src/components/Charts/VegaCharts.vue?3d18","webpack:///./src/components/Charts/VegaCharts.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","staticRenderFns","component"],"mappings":"gHAAA,W,kECAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACJ,EAAIM,GAAG,aAC7GC,EAAkB,G,mjBCiBtB,IAAqB,EAArB,wIAAkC,QAAb,EAAI,gBADxB,eAAU,KACU,WClBkY,I,wBCQnZC,EAAY,eACd,EACAT,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAC,E","file":"js/chunk-87049f0c.8b88465a.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VegaCharts.vue?vue&type=style&index=0&id=79102a0c&scoped=true&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v(\" vega \")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n// import * as vega from 'vega'\r\n// import embed from 'vega-embed'\r\n@Component({})\r\nexport default class Vega extends Vue {\r\n  // private chartList: any = [\r\n  //   {\r\n  //     domId: 'viewBar1',\r\n  //     cardTitle: 'Vega'\r\n  //   },\r\n  //   {\r\n  //     domId: 'viewLine1',\r\n  //     cardTitle: 'Vega'\r\n  //   },\r\n  //   {\r\n  //     domId: 'viewPie1',\r\n  //     cardTitle: 'Vega'\r\n  //   },\r\n  //   {\r\n  //     domId: 'simpleBarChart',\r\n  //     cardTitle: 'Vega-Lite'\r\n  //   },\r\n  //   {\r\n  //     domId: 'sineCurveChart',\r\n  //     cardTitle: 'Vega-Lite'\r\n  //   },\r\n  //   {\r\n  //     domId: 'linearRegression',\r\n  //     cardTitle: 'Vega-Lite'\r\n  //   }\r\n  // ]\r\n\r\n  // private bar1Spec: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega/v5.json',\r\n  //   width: 300,\r\n  //   height: 400,\r\n  //   padding: 5,\r\n  //   autosize: 'pad',\r\n  //   signals: [\r\n  //     {\r\n  //       name: 'rangeStep',\r\n  //       value: 20,\r\n  //       bind: {\r\n  //         input: 'range',\r\n  //         min: 5,\r\n  //         max: 50,\r\n  //         step: 1\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //       name: 'innerPadding',\r\n  //       value: 0.1,\r\n  //       bind: {\r\n  //         input: 'range',\r\n  //         min: 0,\r\n  //         max: 0.7,\r\n  //         step: 0.01\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //       name: 'outerPadding',\r\n  //       value: 0.2,\r\n  //       bind: {\r\n  //         input: 'range',\r\n  //         min: 0,\r\n  //         max: 0.4,\r\n  //         step: 0.01\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //       name: 'height',\r\n  //       update: 'trellisExtent[1]'\r\n  //     }\r\n  //   ],\r\n  //   data: [\r\n  //     {\r\n  //       name: 'tuples',\r\n  //       values: [\r\n  //         {\r\n  //           a: 0,\r\n  //           b: 'a',\r\n  //           c: 6.3\r\n  //         },\r\n  //         {\r\n  //           a: 0,\r\n  //           b: 'a',\r\n  //           c: 4.2\r\n  //         },\r\n  //         {\r\n  //           a: 0,\r\n  //           b: 'b',\r\n  //           c: 6.8\r\n  //         },\r\n  //         {\r\n  //           a: 0,\r\n  //           b: 'c',\r\n  //           c: 5.1\r\n  //         },\r\n  //         {\r\n  //           a: 1,\r\n  //           b: 'b',\r\n  //           c: 4.4\r\n  //         },\r\n  //         {\r\n  //           a: 2,\r\n  //           b: 'b',\r\n  //           c: 3.5\r\n  //         },\r\n  //         {\r\n  //           a: 2,\r\n  //           b: 'c',\r\n  //           c: 6.2\r\n  //         }\r\n  //       ],\r\n  //       transform: [\r\n  //         {\r\n  //           type: 'aggregate',\r\n  //           groupby: ['a', 'b'],\r\n  //           fields: ['c'],\r\n  //           ops: ['average'],\r\n  //           as: ['c']\r\n  //         }\r\n  //       ]\r\n  //     },\r\n  //     {\r\n  //       name: 'trellis',\r\n  //       source: 'tuples',\r\n  //       transform: [\r\n  //         {\r\n  //           type: 'aggregate',\r\n  //           groupby: ['a']\r\n  //         },\r\n  //         {\r\n  //           type: 'formula',\r\n  //           as: 'span',\r\n  //           expr:\r\n  //             'rangeStep * bandspace(datum.count, innerPadding, outerPadding)'\r\n  //         },\r\n  //         {\r\n  //           type: 'stack',\r\n  //           field: 'span'\r\n  //         },\r\n  //         {\r\n  //           type: 'extent',\r\n  //           field: 'y1',\r\n  //           signal: 'trellisExtent'\r\n  //         }\r\n  //       ]\r\n  //     }\r\n  //   ],\r\n  //   scales: [\r\n  //     {\r\n  //       name: 'xscale',\r\n  //       domain: {\r\n  //         data: 'tuples',\r\n  //         field: 'c'\r\n  //       },\r\n  //       nice: true,\r\n  //       zero: true,\r\n  //       round: true,\r\n  //       range: 'width'\r\n  //     },\r\n  //     {\r\n  //       name: 'color',\r\n  //       type: 'ordinal',\r\n  //       range: 'category',\r\n  //       domain: {\r\n  //         data: 'trellis',\r\n  //         field: 'a'\r\n  //       }\r\n  //     }\r\n  //   ],\r\n  //   axes: [\r\n  //     {\r\n  //       orient: 'bottom',\r\n  //       scale: 'xscale',\r\n  //       domain: true\r\n  //     }\r\n  //   ],\r\n  //   marks: [\r\n  //     {\r\n  //       type: 'group',\r\n  //       from: {\r\n  //         data: 'trellis',\r\n  //         facet: {\r\n  //           name: 'faceted_tuples',\r\n  //           data: 'tuples',\r\n  //           groupby: 'a'\r\n  //         }\r\n  //       },\r\n  //       encode: {\r\n  //         enter: {\r\n  //           x: {\r\n  //             value: 0\r\n  //           },\r\n  //           width: {\r\n  //             signal: 'width'\r\n  //           }\r\n  //         },\r\n  //         update: {\r\n  //           y: {\r\n  //             field: 'y0'\r\n  //           },\r\n  //           y2: {\r\n  //             field: 'y1'\r\n  //           }\r\n  //         }\r\n  //       },\r\n  //       scales: [\r\n  //         {\r\n  //           name: 'yscale',\r\n  //           type: 'band',\r\n  //           paddingInner: {\r\n  //             signal: 'innerPadding'\r\n  //           },\r\n  //           paddingOuter: {\r\n  //             signal: 'outerPadding'\r\n  //           },\r\n  //           round: true,\r\n  //           domain: {\r\n  //             data: 'faceted_tuples',\r\n  //             field: 'b'\r\n  //           },\r\n  //           range: {\r\n  //             step: {\r\n  //               signal: 'rangeStep'\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       ],\r\n  //       axes: [\r\n  //         {\r\n  //           orient: 'left',\r\n  //           scale: 'yscale',\r\n  //           ticks: false,\r\n  //           domain: false,\r\n  //           labelPadding: 4\r\n  //         }\r\n  //       ],\r\n  //       marks: [\r\n  //         {\r\n  //           type: 'rect',\r\n  //           from: {\r\n  //             data: 'faceted_tuples'\r\n  //           },\r\n  //           encode: {\r\n  //             enter: {\r\n  //               x: {\r\n  //                 value: 0\r\n  //               },\r\n  //               x2: {\r\n  //                 scale: 'xscale',\r\n  //                 field: 'c'\r\n  //               },\r\n  //               fill: {\r\n  //                 scale: 'color',\r\n  //                 field: 'a'\r\n  //               },\r\n  //               strokeWidth: {\r\n  //                 value: 2\r\n  //               }\r\n  //             },\r\n  //             update: {\r\n  //               y: {\r\n  //                 scale: 'yscale',\r\n  //                 field: 'b'\r\n  //               },\r\n  //               height: {\r\n  //                 scale: 'yscale',\r\n  //                 band: 1\r\n  //               },\r\n  //               stroke: {\r\n  //                 value: null\r\n  //               },\r\n  //               zindex: {\r\n  //                 value: 0\r\n  //               }\r\n  //             },\r\n  //             hover: {\r\n  //               stroke: {\r\n  //                 value: 'firebrick'\r\n  //               },\r\n  //               zindex: {\r\n  //                 value: 1\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       ]\r\n  //     }\r\n  //   ]\r\n  // }\r\n\r\n  // private line1Spec: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega/v5.json',\r\n  //   description: 'A basic line chart example.',\r\n  //   width: 300,\r\n  //   height: 200,\r\n  //   padding: 5,\r\n  //   signals: [\r\n  //     {\r\n  //       name: 'interpolate',\r\n  //       value: 'linear',\r\n  //       bind: {\r\n  //         input: 'select',\r\n  //         options: [\r\n  //           'basis',\r\n  //           'cardinal',\r\n  //           'catmull-rom',\r\n  //           'linear',\r\n  //           'monotone',\r\n  //           'natural',\r\n  //           'step',\r\n  //           'step-after',\r\n  //           'step-before'\r\n  //         ]\r\n  //       }\r\n  //     }\r\n  //   ],\r\n\r\n  //   data: [\r\n  //     {\r\n  //       name: 'table',\r\n  //       values: [\r\n  //         { x: 0, y: 28, c: 0 },\r\n  //         { x: 0, y: 20, c: 1 },\r\n  //         { x: 1, y: 43, c: 0 },\r\n  //         { x: 1, y: 35, c: 1 },\r\n  //         { x: 2, y: 81, c: 0 },\r\n  //         { x: 2, y: 10, c: 1 },\r\n  //         { x: 3, y: 19, c: 0 },\r\n  //         { x: 3, y: 15, c: 1 },\r\n  //         { x: 4, y: 52, c: 0 },\r\n  //         { x: 4, y: 48, c: 1 },\r\n  //         { x: 5, y: 24, c: 0 },\r\n  //         { x: 5, y: 28, c: 1 },\r\n  //         { x: 6, y: 87, c: 0 },\r\n  //         { x: 6, y: 66, c: 1 },\r\n  //         { x: 7, y: 17, c: 0 },\r\n  //         { x: 7, y: 27, c: 1 },\r\n  //         { x: 8, y: 68, c: 0 },\r\n  //         { x: 8, y: 16, c: 1 },\r\n  //         { x: 9, y: 49, c: 0 },\r\n  //         { x: 9, y: 25, c: 1 }\r\n  //       ]\r\n  //     }\r\n  //   ],\r\n\r\n  //   scales: [\r\n  //     {\r\n  //       name: 'x',\r\n  //       type: 'point',\r\n  //       range: 'width',\r\n  //       domain: { data: 'table', field: 'x' }\r\n  //     },\r\n  //     {\r\n  //       name: 'y',\r\n  //       type: 'linear',\r\n  //       range: 'height',\r\n  //       nice: true,\r\n  //       zero: true,\r\n  //       domain: { data: 'table', field: 'y' }\r\n  //     },\r\n  //     {\r\n  //       name: 'color',\r\n  //       type: 'ordinal',\r\n  //       range: 'category',\r\n  //       domain: { data: 'table', field: 'c' }\r\n  //     }\r\n  //   ],\r\n\r\n  //   axes: [\r\n  //     { orient: 'bottom', scale: 'x' },\r\n  //     { orient: 'left', scale: 'y' }\r\n  //   ],\r\n\r\n  //   marks: [\r\n  //     {\r\n  //       type: 'group',\r\n  //       from: {\r\n  //         facet: {\r\n  //           name: 'series',\r\n  //           data: 'table',\r\n  //           groupby: 'c'\r\n  //         }\r\n  //       },\r\n  //       marks: [\r\n  //         {\r\n  //           type: 'line',\r\n  //           from: { data: 'series' },\r\n  //           encode: {\r\n  //             enter: {\r\n  //               x: { scale: 'x', field: 'x' },\r\n  //               y: { scale: 'y', field: 'y' },\r\n  //               stroke: { scale: 'color', field: 'c' },\r\n  //               strokeWidth: { value: 2 }\r\n  //             },\r\n  //             update: {\r\n  //               interpolate: { signal: 'interpolate' },\r\n  //               strokeOpacity: { value: 1 }\r\n  //             },\r\n  //             hover: {\r\n  //               strokeOpacity: { value: 0.5 }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       ]\r\n  //     }\r\n  //   ]\r\n  // }\r\n\r\n  // private pie1Spec: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega/v5.json',\r\n  //   description: 'A basic pie chart example.',\r\n  //   width: 200,\r\n  //   height: 300,\r\n  //   autosize: 'none',\r\n\r\n  //   signals: [\r\n  //     {\r\n  //       name: 'startAngle',\r\n  //       value: 0,\r\n  //       bind: { input: 'range', min: 0, max: 6.29, step: 0.01 }\r\n  //     },\r\n  //     {\r\n  //       name: 'endAngle',\r\n  //       value: 6.29,\r\n  //       bind: { input: 'range', min: 0, max: 6.29, step: 0.01 }\r\n  //     },\r\n  //     {\r\n  //       name: 'padAngle',\r\n  //       value: 0,\r\n  //       bind: { input: 'range', min: 0, max: 0.1 }\r\n  //     },\r\n  //     {\r\n  //       name: 'innerRadius',\r\n  //       value: 0,\r\n  //       bind: { input: 'range', min: 0, max: 90, step: 1 }\r\n  //     },\r\n  //     {\r\n  //       name: 'cornerRadius',\r\n  //       value: 0,\r\n  //       bind: { input: 'range', min: 0, max: 10, step: 0.5 }\r\n  //     },\r\n  //     {\r\n  //       name: 'sort',\r\n  //       value: false,\r\n  //       bind: { input: 'checkbox' }\r\n  //     }\r\n  //   ],\r\n\r\n  //   data: [\r\n  //     {\r\n  //       name: 'table',\r\n  //       values: [\r\n  //         { id: 1, field: 4 },\r\n  //         { id: 2, field: 6 },\r\n  //         { id: 3, field: 10 },\r\n  //         { id: 4, field: 3 },\r\n  //         { id: 5, field: 7 },\r\n  //         { id: 6, field: 8 }\r\n  //       ],\r\n  //       transform: [\r\n  //         {\r\n  //           type: 'pie',\r\n  //           field: 'field',\r\n  //           startAngle: { signal: 'startAngle' },\r\n  //           endAngle: { signal: 'endAngle' },\r\n  //           sort: { signal: 'sort' }\r\n  //         }\r\n  //       ]\r\n  //     }\r\n  //   ],\r\n\r\n  //   scales: [\r\n  //     {\r\n  //       name: 'color',\r\n  //       type: 'ordinal',\r\n  //       domain: { data: 'table', field: 'id' },\r\n  //       range: { scheme: 'category20' }\r\n  //     }\r\n  //   ],\r\n\r\n  //   marks: [\r\n  //     {\r\n  //       type: 'arc',\r\n  //       from: { data: 'table' },\r\n  //       encode: {\r\n  //         enter: {\r\n  //           fill: { scale: 'color', field: 'id' },\r\n  //           x: { signal: 'width / 2' },\r\n  //           y: { signal: 'height / 2' }\r\n  //         },\r\n  //         update: {\r\n  //           startAngle: { field: 'startAngle' },\r\n  //           endAngle: { field: 'endAngle' },\r\n  //           padAngle: { signal: 'padAngle' },\r\n  //           innerRadius: { signal: 'innerRadius' },\r\n  //           outerRadius: { signal: 'width / 2' },\r\n  //           cornerRadius: { signal: 'cornerRadius' }\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   ]\r\n  // }\r\n\r\n  // private simpleBarLiteSpec: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\r\n  //   description: 'A simple bar chart with embedded data.',\r\n  //   width: 'container',\r\n  //   height: 'container',\r\n  //   data: {\r\n  //     values: [\r\n  //       { a: 'A', b: 28 },\r\n  //       { a: 'B', b: 55 },\r\n  //       { a: 'C', b: 43 },\r\n  //       { a: 'D', b: 91 },\r\n  //       { a: 'E', b: 81 },\r\n  //       { a: 'F', b: 53 },\r\n  //       { a: 'G', b: 19 },\r\n  //       { a: 'H', b: 87 },\r\n  //       { a: 'I', b: 52 }\r\n  //     ]\r\n  //   },\r\n  //   mark: 'bar',\r\n  //   encoding: {\r\n  //     x: { field: 'a', type: 'ordinal', axis: { labelAngle: 0 } },\r\n  //     y: { field: 'b', type: 'quantitative' }\r\n  //   }\r\n  // }\r\n\r\n  // private lineLiteSpec: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\r\n  //   description: 'Plots two functions using a generated sequence.',\r\n  //   width: 'container',\r\n  //   autosize: {\r\n  //     type: 'fit',\r\n  //     contains: 'padding'\r\n  //   },\r\n  //   data: {\r\n  //     sequence: {\r\n  //       start: 0,\r\n  //       stop: 12.7,\r\n  //       step: 0.1,\r\n  //       as: 'x'\r\n  //     }\r\n  //   },\r\n  //   transform: [\r\n  //     {\r\n  //       calculate: 'sin(datum.x)',\r\n  //       as: 'sin(x)'\r\n  //     },\r\n  //     {\r\n  //       calculate: 'cos(datum.x)',\r\n  //       as: 'cos(x)'\r\n  //     },\r\n  //     {\r\n  //       fold: ['sin(x)', 'cos(x)']\r\n  //     }\r\n  //   ],\r\n  //   mark: 'line',\r\n  //   encoding: {\r\n  //     x: {\r\n  //       type: 'quantitative',\r\n  //       field: 'x'\r\n  //     },\r\n  //     y: {\r\n  //       field: 'value',\r\n  //       type: 'quantitative'\r\n  //     },\r\n  //     color: {\r\n  //       field: 'key',\r\n  //       type: 'nominal',\r\n  //       title: null\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // private linearRegression: any = {\r\n  //   $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\r\n  //   data: {\r\n  //     url: 'https://vega.github.io/vega-lite/data/movies.json'\r\n  //   },\r\n  //   layer: [\r\n  //     {\r\n  //       mark: {\r\n  //         type: 'point',\r\n  //         filled: true\r\n  //       },\r\n  //       encoding: {\r\n  //         x: {\r\n  //           field: 'Rotten_Tomatoes_Rating',\r\n  //           type: 'quantitative'\r\n  //         },\r\n  //         y: {\r\n  //           field: 'IMDB_Rating',\r\n  //           type: 'quantitative'\r\n  //         }\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //       mark: {\r\n  //         type: 'line',\r\n  //         color: 'firebrick'\r\n  //       },\r\n  //       transform: [\r\n  //         {\r\n  //           regression: 'IMDB_Rating',\r\n  //           on: 'Rotten_Tomatoes_Rating'\r\n  //         }\r\n  //       ],\r\n  //       encoding: {\r\n  //         x: {\r\n  //           field: 'Rotten_Tomatoes_Rating',\r\n  //           type: 'quantitative'\r\n  //         },\r\n  //         y: {\r\n  //           field: 'IMDB_Rating',\r\n  //           type: 'quantitative'\r\n  //         }\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //       transform: [\r\n  //         {\r\n  //           regression: 'IMDB_Rating',\r\n  //           on: 'Rotten_Tomatoes_Rating',\r\n  //           params: true\r\n  //         },\r\n  //         { calculate: `'R²: '+format(datum.rSquared, '.2f')`, as: 'R2' }\r\n  //       ],\r\n  //       mark: {\r\n  //         type: 'text',\r\n  //         color: 'firebrick',\r\n  //         x: 'width',\r\n  //         align: 'right',\r\n  //         y: -5\r\n  //       },\r\n  //       encoding: {\r\n  //         text: { type: 'nominal', field: 'R2' }\r\n  //       }\r\n  //     }\r\n  //   ]\r\n  // }\r\n\r\n  // private renderVega(spec: any, domId: string) {\r\n  //   new vega.View(vega.parse(spec))\r\n  //     .renderer('canvas')\r\n  //     .initialize(domId)\r\n  //     .hover()\r\n  //     .run()\r\n  // }\r\n  // private async mounted() {\r\n  //   this.renderVega(this.bar1Spec, '#viewBar1')\r\n  //   this.renderVega(this.line1Spec, '#viewLine1')\r\n  //   this.renderVega(this.pie1Spec, '#viewPie1')\r\n  //   embed('#simpleBarChart', this.simpleBarLiteSpec)\r\n  //   embed('#sineCurveChart', this.lineLiteSpec)\r\n  //   embed('#linearRegression', this.linearRegression)\r\n  // }\r\n}\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VegaCharts.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--14-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VegaCharts.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./VegaCharts.vue?vue&type=template&id=79102a0c&scoped=true&\"\nimport script from \"./VegaCharts.vue?vue&type=script&lang=ts&\"\nexport * from \"./VegaCharts.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./VegaCharts.vue?vue&type=style&index=0&id=79102a0c&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"79102a0c\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}